generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String @id @default(uuid())
  clerkId     String @unique
  username    String? @unique
  email       String? @unique
  password    String?
  biogram     String?
  link        String?
  posts       Post[] 
  savedPosts  SavedPost[]
  likes       Like[]
  comments    Comment[]
  replies     CommentReply[]
  following   Follow[] @relation("UserFollowing")  // Specify a unique relation name
  followers   Follow[] @relation("UserFollowers")
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String
}

model Post {
  id        String @id @default(uuid())
  author    User @relation(fields: [authorId], references: [id])
  authorId  String
  text      String
  image     String?
  video     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
  comments  Comment[]
  savedBy   SavedPost[]
}

model SavedPost {
  id        String @id @default(uuid())
  owner     User @relation(fields: [ownerId], references: [id])
  ownerId   String
  post      Post @relation(fields: [postId], references: [id])
  postId    String
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post?   @relation( fields: [postId], references: [id])
  postId String?
  comment Comment? @relation( fields: [commentId], references: [id])
  commentId String?
}

model Comment {
  id        String @id @default(uuid())
  text      String
  image     String?
  video     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String  
  likes     Like[]
  replies   CommentReply[]
}

model CommentReply {
  id        String @id @default(uuid())
  text      String
  image     String?
  video     String?
  createdAt DateTime @default(now())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}
